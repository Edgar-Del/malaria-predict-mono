name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  lint-and-format:
    name: Lint and Format
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black flake8 isort mypy pytest-cov
    
    - name: Run Black formatter check
      run: black --check --diff src/ tests/
    
    - name: Run isort import sorting check
      run: isort --check-only --diff src/ tests/
    
    - name: Run Flake8 linter
      run: flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503
    
    - name: Run MyPy type checker
      run: mypy src/ --ignore-missing-imports --no-strict-optional
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: src/dashboards/package-lock.json
    
    - name: Install Node dependencies
      working-directory: src/dashboards
      run: npm ci
    
    - name: Run ESLint
      working-directory: src/dashboards
      run: npm run lint
    
    - name: Run Prettier check
      working-directory: src/dashboards
      run: npm run format:check

  test-python:
    name: Python Tests
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: malaria_bie_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-asyncio
    
    - name: Wait for PostgreSQL
      run: |
        while ! pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
    
    - name: Run database migrations
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/malaria_bie_test
      run: |
        python -c "
        import asyncio
        from src.ingest.database_manager import create_tables, get_db_connection
        
        async def setup_db():
            conn = await get_db_connection()
            await create_tables(conn)
            await conn.close()
        
        asyncio.run(setup_db())
        "
    
    - name: Run Python tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/malaria_bie_test
        ENVIRONMENT: testing
        LOG_LEVEL: WARNING
      run: |
        pytest tests/ \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --junitxml=test-results.xml \
          -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: python
        name: python-coverage

  test-node:
    name: Node.js Tests
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: src/dashboards/package-lock.json
    
    - name: Install Node dependencies
      working-directory: src/dashboards
      run: npm ci
    
    - name: Run Node.js tests
      working-directory: src/dashboards
      run: npm test -- --coverage --watchAll=false
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: src/dashboards/coverage/lcov.info
        flags: node
        name: node-coverage

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep
    
    - name: Run Safety check
      run: safety check --json --output safety-report.json || true
    
    - name: Run Bandit security linter
      run: bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Run Semgrep security scan
      run: semgrep --config=auto src/ --json --output=semgrep-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
          semgrep-report.json

  build-and-test-docker:
    name: Build and Test Docker
    runs-on: ubuntu-latest
    needs: [test-python, test-node]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build API Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: infra/docker/Dockerfile.api
        push: false
        tags: malaria-api:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build Dashboard Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: infra/docker/Dockerfile.dashboard
        push: false
        tags: malaria-dashboard:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker Compose
      run: |
        docker-compose -f infra/compose/docker-compose.yaml config
        docker-compose -f infra/compose/docker-compose.yaml build
        docker-compose -f infra/compose/docker-compose.yaml up -d
        sleep 30
        docker-compose -f infra/compose/docker-compose.yaml ps
        docker-compose -f infra/compose/docker-compose.yaml logs
        docker-compose -f infra/compose/docker-compose.yaml down

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-and-test-docker
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: malaria_bie
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-asyncio httpx
    
    - name: Wait for PostgreSQL
      run: |
        while ! pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
    
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/malaria_bie
        ENVIRONMENT: testing
      run: |
        pytest tests/integration/ -v --tb=short

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test-python, test-node]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust pytest-benchmark
    
    - name: Run performance tests
      run: |
        pytest tests/performance/ -v --benchmark-only --benchmark-sort=mean

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Implementar deploy para staging
        # Ex: kubectl apply -f k8s/staging/
        # ou docker-compose -f docker-compose.staging.yml up -d

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan, performance-tests]
    if: github.ref == 'refs/heads/main'
    
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Implementar deploy para produção
        # Ex: kubectl apply -f k8s/production/
        # ou docker-compose -f docker-compose.prod.yml up -d

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success'
      run: |
        echo "Deployment successful! 🎉"
        # Implementar notificação (Slack, Discord, etc.)
    
    - name: Notify failure
      if: needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure'
      run: |
        echo "Deployment failed! ❌"
        # Implementar notificação de erro

