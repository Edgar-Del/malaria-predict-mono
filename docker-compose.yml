version: '3.8'

services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: malaria_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-malaria_bie}
      POSTGRES_USER: ${POSTGRES_USER:-malaria_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-malaria_pass}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/sql:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - malaria_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-malaria_user} -d ${POSTGRES_DB:-malaria_bie}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: malaria_backend
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-malaria_user}:${POSTGRES_PASSWORD:-malaria_pass}@postgres:5432/${POSTGRES_DB:-malaria_bie}
      API_HOST: 0.0.0.0
      API_PORT: 8000
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here}
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      ALERT_EMAIL_RECIPIENTS: ${ALERT_EMAIL_RECIPIENTS}
      ALERT_RISK_THRESHOLD: ${ALERT_RISK_THRESHOLD:-0.7}
      MODEL_PATH: /app/models/malaria_model.joblib
      RANDOM_STATE: ${RANDOM_STATE:-42}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    ports:
      - "8000:8000"
    volumes:
      - ./ml/models:/app/models
      - ./backend/logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - malaria_network
    restart: unless-stopped

  # Frontend Dashboard
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: malaria_frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - malaria_network
    restart: unless-stopped

  # ML Training Service
  ml-training:
    build:
      context: ./ml
      dockerfile: Dockerfile
    container_name: malaria_ml_training
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-malaria_user}:${POSTGRES_PASSWORD:-malaria_pass}@postgres:5432/${POSTGRES_DB:-malaria_bie}
      MODEL_PATH: /app/models/malaria_model.joblib
      RANDOM_STATE: ${RANDOM_STATE:-42}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - ./ml/models:/app/models
      - ./ml/logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - malaria_network
    restart: "no"
    command: ["python", "-m", "training.train_model"]

  # MLflow Tracking Server
  mlflow:
    build:
      context: ./ml
      dockerfile: Dockerfile
    container_name: malaria_mlflow
    environment:
      MLFLOW_BACKEND_STORE_URI: postgresql://${POSTGRES_USER:-malaria_user}:${POSTGRES_PASSWORD:-malaria_pass}@postgres:5432/${POSTGRES_DB:-malaria_bie}
      MLFLOW_ARTIFACT_ROOT: /app/mlruns
    ports:
      - "5000:5000"
    volumes:
      - mlflow_data:/app/mlruns
      - ./ml/models:/app/models
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - malaria_network
    restart: unless-stopped
    command: ["mlflow", "server", "--host", "0.0.0.0", "--port", "5000"]

  # Worker de Alertas
  alerts-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: malaria_alerts_worker
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-malaria_user}:${POSTGRES_PASSWORD:-malaria_pass}@postgres:5432/${POSTGRES_DB:-malaria_bie}
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      ALERT_EMAIL_RECIPIENTS: ${ALERT_EMAIL_RECIPIENTS}
      ALERT_RISK_THRESHOLD: ${ALERT_RISK_THRESHOLD:-0.7}
      ALERTS_CHECK_INTERVAL_HOURS: ${ALERTS_CHECK_INTERVAL_HOURS:-24}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - ./backend/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - malaria_network
    restart: unless-stopped
    command: ["python", "-m", "infrastructure.alerts.worker"]

volumes:
  postgres_data:
  mlflow_data:

networks:
  malaria_network:
    driver: bridge
