#!/bin/bash

# Script de inicializa√ß√£o r√°pida do Sistema de Previs√£o de Mal√°ria - Bi√©
# Autor: Edgar Tchissingui
# Data: Janeiro 2024

set -e  # Parar em caso de erro

# Cores para output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir mensagens coloridas
print_message() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE} $1${NC}"
    echo -e "${BLUE}================================${NC}"
}

# Verificar se Docker est√° instalado
check_docker() {
    if ! command -v docker &> /dev/null; then
        print_error "Docker n√£o est√° instalado. Instale o Docker primeiro."
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose n√£o est√° instalado. Instale o Docker Compose primeiro."
        exit 1
    fi
}

# Verificar se arquivo .env existe
check_env_file() {
    if [ ! -f ".env" ]; then
        print_warning "Arquivo .env n√£o encontrado. Criando a partir do .env.example..."
        cp .env.example .env
        print_warning "Configure as vari√°veis no arquivo .env antes de continuar."
        print_warning "Especialmente: DATABASE_URL, SMTP_USER, SMTP_PASSWORD, ALERT_EMAIL_RECIPIENTS"
        read -p "Pressione Enter para continuar ap√≥s configurar o .env..."
    fi
}

# Fun√ß√£o principal
main() {
    print_header "Sistema de Previs√£o de Risco de Mal√°ria - Bi√©"
    print_message "Iniciando configura√ß√£o r√°pida..."
    
    # Verifica√ß√µes
    check_docker
    check_env_file
    
    print_message "Construindo e iniciando servi√ßos..."
    
    # Parar containers existentes
    docker-compose down 2>/dev/null || true
    
    # Construir e iniciar servi√ßos
    docker-compose up --build -d
    
    print_message "Aguardando servi√ßos ficarem prontos..."
    sleep 10
    
    # Verificar status dos servi√ßos
    print_message "Verificando status dos servi√ßos..."
    
    # Verificar API
    if curl -s http://localhost:8000/health > /dev/null 2>&1; then
        print_message "‚úÖ API est√° rodando em http://localhost:8000"
    else
        print_warning "‚ö†Ô∏è  API pode n√£o estar pronta ainda. Aguarde alguns segundos."
    fi
    
    # Verificar Dashboard
    if curl -s http://localhost:3000 > /dev/null 2>&1; then
        print_message "‚úÖ Dashboard est√° rodando em http://localhost:3000"
    else
        print_warning "‚ö†Ô∏è  Dashboard pode n√£o estar pronto ainda. Aguarde alguns segundos."
    fi
    
    # Verificar PostgreSQL
    if docker-compose ps postgres | grep -q "Up"; then
        print_message "‚úÖ PostgreSQL est√° rodando"
    else
        print_error "‚ùå PostgreSQL n√£o est√° rodando"
    fi
    
    print_header "Configura√ß√£o Conclu√≠da!"
    echo ""
    print_message "Servi√ßos dispon√≠veis:"
    echo "  üåê Dashboard: http://localhost:3000"
    echo "  üîå API: http://localhost:8000"
    echo "  üìö Documenta√ß√£o: http://localhost:8000/docs"
    echo "  ‚ù§Ô∏è  Health Check: http://localhost:8000/health"
    echo ""
    print_message "Pr√≥ximos passos:"
    echo "  1. Acesse o dashboard em http://localhost:3000"
    echo "  2. Configure dados de exemplo se necess√°rio"
    echo "  3. Treine o modelo atrav√©s da API"
    echo "  4. Teste as previs√µes"
    echo ""
    print_message "Para parar os servi√ßos: docker-compose down"
    print_message "Para ver logs: docker-compose logs -f"
    echo ""
    print_message "Configura√ß√£o r√°pida conclu√≠da! üéâ"
}

# Executar fun√ß√£o principal
main "$@"

