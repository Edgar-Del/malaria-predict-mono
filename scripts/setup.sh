#!/bin/bash

# Script de configura√ß√£o inicial do Sistema de Previs√£o de Risco de Mal√°ria (Bi√©)
# Uso: ./scripts/setup.sh

set -e  # Parar em caso de erro

echo "üè• Configurando Sistema de Previs√£o de Risco de Mal√°ria (Bi√©)"
echo "=============================================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir mensagens coloridas
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar se est√° no diret√≥rio correto
if [ ! -f "README.md" ] || [ ! -d "src" ]; then
    print_error "Execute este script no diret√≥rio raiz do projeto"
    exit 1
fi

print_status "Verificando pr√©-requisitos..."

# Verificar Docker
if ! command -v docker &> /dev/null; then
    print_error "Docker n√£o est√° instalado. Instale Docker primeiro."
    exit 1
fi

# Verificar Docker Compose
if ! command -v docker-compose &> /dev/null; then
    print_error "Docker Compose n√£o est√° instalado. Instale Docker Compose primeiro."
    exit 1
fi

print_success "Pr√©-requisitos verificados"

# Criar diret√≥rios necess√°rios
print_status "Criando diret√≥rios necess√°rios..."
mkdir -p data/{raw,interim,processed}
mkdir -p models
mkdir -p logs
mkdir -p src/dashboards/.next

print_success "Diret√≥rios criados"

# Configurar arquivo .env se n√£o existir
if [ ! -f ".env" ]; then
    print_status "Criando arquivo .env..."
    cp env.example .env
    print_warning "Configure o arquivo .env com suas configura√ß√µes antes de continuar"
    print_warning "Especialmente as configura√ß√µes de SMTP para alertas por e-mail"
else
    print_success "Arquivo .env j√° existe"
fi

# Verificar se Python est√° dispon√≠vel para testes
if command -v python3 &> /dev/null; then
    print_status "Configurando ambiente Python..."
    
    # Criar ambiente virtual se n√£o existir
    if [ ! -d "venv" ]; then
        python3 -m venv venv
        print_success "Ambiente virtual Python criado"
    fi
    
    # Ativar ambiente virtual e instalar depend√™ncias
    source venv/bin/activate
    pip install --upgrade pip
    pip install -r requirements.txt
    print_success "Depend√™ncias Python instaladas"
else
    print_warning "Python3 n√£o encontrado. Testes Python n√£o estar√£o dispon√≠veis"
fi

# Verificar se Node.js est√° dispon√≠vel para frontend
if command -v node &> /dev/null; then
    print_status "Configurando frontend..."
    
    cd src/dashboards
    if [ ! -d "node_modules" ]; then
        npm install
        print_success "Depend√™ncias do frontend instaladas"
    else
        print_success "Depend√™ncias do frontend j√° instaladas"
    fi
    cd ../..
else
    print_warning "Node.js n√£o encontrado. Frontend n√£o estar√° dispon√≠vel em desenvolvimento"
fi

# Criar dados de exemplo
print_status "Criando dados de exemplo..."
if command -v python3 &> /dev/null; then
    source venv/bin/activate
    python -c "
from src.ingest.data_loader import create_sample_data
create_sample_data('data/raw/sample_data.csv')
print('Dados de exemplo criados')
"
    print_success "Dados de exemplo criados"
else
    print_warning "N√£o foi poss√≠vel criar dados de exemplo (Python n√£o dispon√≠vel)"
fi

# Verificar configura√ß√£o do Docker
print_status "Verificando configura√ß√£o do Docker..."

# Testar se Docker est√° rodando
if ! docker info &> /dev/null; then
    print_error "Docker n√£o est√° rodando. Inicie o Docker primeiro."
    exit 1
fi

print_success "Docker est√° funcionando"

# Construir imagens Docker
print_status "Construindo imagens Docker..."
docker-compose -f infra/compose/docker-compose.yaml build

print_success "Imagens Docker constru√≠das"

# Executar testes b√°sicos
print_status "Executando testes b√°sicos..."

if command -v python3 &> /dev/null; then
    source venv/bin/activate
    if python -m pytest tests/test_data_loader.py -v --tb=short; then
        print_success "Testes b√°sicos passaram"
    else
        print_warning "Alguns testes falharam, mas a configura√ß√£o pode estar correta"
    fi
else
    print_warning "Testes n√£o executados (Python n√£o dispon√≠vel)"
fi

# Mostrar pr√≥ximos passos
echo ""
echo "üéâ Configura√ß√£o conclu√≠da!"
echo ""
echo "Pr√≥ximos passos:"
echo "1. Configure o arquivo .env com suas configura√ß√µes"
echo "2. Inicie o sistema: docker-compose -f infra/compose/docker-compose.yaml up -d"
echo "3. Acesse o dashboard: http://localhost:3000"
echo "4. Acesse a API: http://localhost:8000/docs"
echo ""
echo "Comandos √∫teis:"
echo "- Ver logs: docker-compose -f infra/compose/docker-compose.yaml logs -f"
echo "- Parar sistema: docker-compose -f infra/compose/docker-compose.yaml down"
echo "- Reiniciar: docker-compose -f infra/compose/docker-compose.yaml restart"
echo ""
echo "Para desenvolvimento:"
echo "- API: cd src/api && uvicorn main:app --reload"
echo "- Frontend: cd src/dashboards && npm run dev"
echo "- Testes: pytest"
echo ""
echo "Documenta√ß√£o:"
echo "- Guia do usu√°rio: docs/USER_GUIDE.md"
echo "- Documenta√ß√£o da API: docs/API.md"
echo "- Guia de instala√ß√£o: docs/INSTALLATION.md"
echo ""

print_success "Sistema configurado com sucesso! üöÄ"