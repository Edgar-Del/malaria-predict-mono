# Multi-stage build para otimização
FROM python:3.11-slim as base

# Instalar dependências do sistema
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Criar usuário não-root
RUN groupadd -r malaria && useradd -r -g malaria malaria

# Definir diretório de trabalho
WORKDIR /app

# Copiar requirements primeiro para cache de dependências
COPY requirements.txt .

# Instalar dependências Python
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Stage de desenvolvimento
FROM base as development

# Instalar dependências de desenvolvimento
RUN pip install --no-cache-dir \
    pytest \
    pytest-asyncio \
    pytest-cov \
    black \
    flake8 \
    mypy \
    bandit

# Copiar código fonte
COPY . .

# Criar diretórios necessários
RUN mkdir -p logs data/raw data/interim data/processed models

# Definir permissões
RUN chown -R malaria:malaria /app

# Mudar para usuário não-root
USER malaria

# Expor porta
EXPOSE 8000

# Comando padrão para desenvolvimento
CMD ["uvicorn", "src.interfaces.api.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

# Stage de produção
FROM base as production

# Copiar código fonte
COPY . .

# Criar diretórios necessários
RUN mkdir -p logs data/raw data/interim data/processed models

# Definir permissões
RUN chown -R malaria:malaria /app

# Mudar para usuário não-root
USER malaria

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expor porta
EXPOSE 8000

# Comando padrão para produção
CMD ["uvicorn", "src.interfaces.api.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]

